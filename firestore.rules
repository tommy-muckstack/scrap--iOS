rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Security rules for notes collection
    match /notes/{noteId} {
      // Users can only read/write their own notes (for existing documents)
      allow read, write: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Users can only create notes with their own userId
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && validateNoteData(request.resource.data);
      
      // Allow updates if user owns the note
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && request.auth.uid == request.resource.data.userId;
    }
    
    // Security rules for archived notes collection
    match /notes_archived/{noteId} {
      // Only allow writes for archiving - users can only archive their own notes
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && validateArchivedNoteData(request.resource.data);
      
      // No read or update access from frontend - archives are storage-only
      allow read, update, delete: if false;
    }
    
    // Security rules for archived drawings collection
    match /drawings_archived/{drawingId} {
      // Only allow writes for archiving - users can only archive drawings from their own notes
      allow create: if request.auth != null 
        && validateArchivedDrawingData(request.resource.data);
      
      // No read or update access from frontend - archives are storage-only
      allow read, update, delete: if false;
    }
    
    // Security rules for user-specific categories subcollection
    match /users/{userId}/categories/{categoryId} {
      // Users can only access their own categories
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow creating categories with proper validation
      allow create: if request.auth != null 
        && request.auth.uid == userId
        && validateCategoryData(request.resource.data);
    }
    
    // Security rules for user documents (if needed for other user data)
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Validate note data structure
function validateNoteData(data) {
  return data.keys().hasAll(['userId', 'content', 'isTask', 'categories', 'createdAt', 'updatedAt', 'creationType'])
    && data.userId is string
    && data.content is string
    && data.content.size() <= 10000  // Max 10k characters
    && data.isTask is bool
    && data.categories is list
    && data.categories.size() <= 10  // Max 10 categories
    && data.createdAt is timestamp
    && data.updatedAt is timestamp
    && data.creationType is string
    && data.creationType in ['voice', 'text', 'rich_text'];
}

// Validate category data structure
function validateCategoryData(data) {
  return data.keys().hasAll(['name', 'color', 'created_at', 'usageCount'])
    && data.name is string
    && data.name.size() > 0
    && data.name.size() <= 50  // Max 50 characters for category name
    && data.color is string
    && data.color.matches('^#[0-9A-Fa-f]{6}$')  // Valid hex color
    && data.created_at is timestamp
    && data.usageCount is number
    && data.usageCount >= 0;
}

// Validate archived note data structure
function validateArchivedNoteData(data) {
  // Required fields check
  let hasRequiredFields = data.keys().hasAll(['userId', 'content', 'isTask', 'categories', 'createdAt', 'updatedAt', 'creationType', 'archivedAt', 'originalId']);
  
  // All allowed fields (required + optional)
  let allowedFields = ['userId', 'content', 'isTask', 'categories', 'createdAt', 'updatedAt', 'creationType', 'archivedAt', 'originalId', 'title', 'categoryIds', 'pineconeId', 'rtfContent', 'id'];
  
  // Check that all fields in data are allowed
  let hasOnlyAllowedFields = data.keys().hasOnly(allowedFields);
  
  return hasRequiredFields && hasOnlyAllowedFields
    && data.userId is string
    && data.content is string
    && data.content.size() <= 10000  // Max 10k characters
    && data.isTask is bool
    && data.categories is list
    && data.categories.size() <= 10  // Max 10 categories
    && data.createdAt is timestamp
    && data.updatedAt is timestamp
    && data.creationType is string
    && data.creationType in ['voice', 'text', 'rich_text']
    && data.archivedAt is timestamp
    && data.originalId is string
    // Optional fields validation
    && (!('title' in data.keys()) || data.title is string)
    && (!('categoryIds' in data.keys()) || (data.categoryIds is list && data.categoryIds.size() <= 10))
    && (!('pineconeId' in data.keys()) || data.pineconeId is string)
    && (!('rtfContent' in data.keys()) || data.rtfContent is string)
    && (!('id' in data.keys()) || data.id is string);
}

// Validate archived drawing data structure
function validateArchivedDrawingData(data) {
  // Required fields check
  let hasRequiredFields = data.keys().hasAll(['drawingId', 'noteId', 'base64Data', 'height', 'color', 'archivedAt', 'originalNoteId']);
  
  // All allowed fields
  let allowedFields = ['drawingId', 'noteId', 'base64Data', 'height', 'color', 'archivedAt', 'originalNoteId'];
  
  // Check that all fields in data are allowed
  let hasOnlyAllowedFields = data.keys().hasOnly(allowedFields);
  
  return hasRequiredFields && hasOnlyAllowedFields
    && data.drawingId is string
    && data.noteId is string
    && data.base64Data is string
    && data.base64Data.size() <= 1000000  // Max 1MB base64 data
    && data.height is string
    && data.color is string
    && data.color.matches('^#[0-9A-Fa-f]{6}$')  // Valid hex color
    && data.archivedAt is timestamp
    && data.originalNoteId is string;
}